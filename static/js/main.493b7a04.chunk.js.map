{"version":3,"sources":["components/Keyboard.js","components/ShowDrawing.js","components/ShowWord.js","components/GameSelect.js","components/GameHeader.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["AllowedChars","Keyboard","MainCharacterPressed","visible","id","style","display","map","ch","idx","onClick","ShowDrawing","drawingIndex","className","src","process","alt","ShowWord","toGuessChars","guessedChars","reveal","hasChar","includes","displayChar","endStyle","backgroundColor","border","wordList","require","GameSelect","callback","loadWords","minScore","maxScore","list","word","length","score","push","words","guesses","difficulty","GameHeader","gameState","message","guessesLeft","newGame","class","Main","props","state","getInitialState","characterPressed","bind","gameOver","charsRemain","wrongGuessCount","e","document","getElementById","disabled","guessed","this","checkGuess","setState","array","Math","floor","random","toUpperCase","keyboard","childNodes","obj","initWord","sum","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.493b7a04.chunk.js","sourcesContent":["import \"./Keyboard.css\"\r\nvar AllowedChars = [...\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"];//ÅÄÖ\"];\r\n\r\nfunction Keyboard({MainCharacterPressed, visible}) {\r\n    return (\r\n        <div id=\"keyboard\" style={{display:visible?\"block\" : \"none\"}}>\r\n            {AllowedChars.map((ch, idx) => <button id={`key${ch}`} onClick={() => MainCharacterPressed(ch)}>{ch}</button>)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Keyboard;","function ShowDrawing({drawingIndex}) {\r\n    return (\r\n        <img className=\"image\" src={`${process.env.PUBLIC_URL}/images/hangman_${drawingIndex}.png`} alt={`Image ${drawingIndex}`} />\r\n    );\r\n}\r\n\r\nexport default ShowDrawing;","function ShowWord({toGuessChars, guessedChars, visible, reveal}) {\r\n    const makeCell = (ch, idx) => {\r\n        const hasChar = guessedChars.includes(ch);\r\n        const displayChar = reveal || hasChar ? ch : \"*\"\r\n        const endStyle = { backgroundColor: hasChar ? \"#70ff7030\" : \"#ff707030\", border: \"none\" }\r\n\r\n        return (\r\n            <td className=\"guessed\" style={ reveal ? endStyle : {} }>{displayChar}</td>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <table id=\"showWord\" style={{display:visible ? \"block\" : \"none\"}}>\r\n            <thead>\r\n                <tr>\r\n                    {toGuessChars.map(makeCell)}\r\n                </tr>\r\n            </thead>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default ShowWord;","var wordList = require(`./en-dictionary.json`);\r\n\r\nfunction GameSelect({ callback, visible }) {\r\n    const loadWords = (minScore, maxScore) => {\r\n        let list = [];\r\n        for (let word in wordList) {\r\n            if (word.length >= 4) {\r\n                let score = wordList[word];\r\n                if (score < maxScore && score >= minScore) list.push(word);\r\n            }\r\n        }\r\n        return list;\r\n    }\r\n\r\n    return (\r\n        <div id=\"game-select\" style={{ display: visible ? \"block\" : \"none\" }}>\r\n            <p>Select Difficulty</p>\r\n            <button onClick={() => callback({ words: loadWords(0, 13), guesses: 9, difficulty: \"Easy\" })}>Easy</button>\r\n            <button onClick={() => callback({ words: loadWords(10.5, 16.5), guesses: 9, difficulty: \"Normal\" })}>Normal</button>\r\n            <button onClick={() => callback({ words: loadWords(13, 19.5), guesses: 7, difficulty: \"Hard\" })}>Hard</button>\r\n            <button onClick={() => callback({ words: loadWords(16.5, 70), guesses: 5, difficulty: \"Expert\" })}>Expert</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameSelect;","import \"./GameHeader.css\";\r\nimport GameSelect from \"./GameSelect\";\r\n\r\nfunction GameHeader({ gameState, message, guessesLeft, newGame }) {\r\n    // Gamestate:\r\n    //  0: select difficulty \r\n    //  1: select letter\r\n    //  2: game over\r\n    return (\r\n        <div class=\"game-header\">\r\n            \r\n            <div id=\"game-info\" style={ {display: gameState===1 ? \"block\" : \"none\"} }>\r\n                <p>You have {guessesLeft} guess{guessesLeft !== 1 ? \"es\" : \"\"} left!</p>\r\n                <p>{message}</p>\r\n            </div>\r\n            <div id=\"gameover\" style={{ display: gameState === 2 ? \"block\" : \"none\" }}>\r\n                <p>{message}</p>\r\n                <button onClick={() => newGame(true)}>Change Difficulty</button>\r\n                <button onClick={() => newGame(false)}>Keep Playing!</button>\r\n            </div>\r\n            <GameSelect visible={gameState === 0} callback={newGame} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameHeader;","import Keyboard from \"./Keyboard\";\r\nimport ShowDrawing from \"./ShowDrawing\";\r\nimport ShowWord from \"./ShowWord\";\r\nimport React from \"react\";\r\nimport GameHeader from \"./GameHeader\";\r\n/*\r\nlet wordList = [\r\n    \"VIISIKKO\", \"EPÄTOSI\", \"JOPAS\", \"JOTAKIN\", \"MELKEIN\", \"PÄÄKALLO\", \"ZEEBRA\", \"RUSKEA\", \"VÄRITÖN\", \"PALLUKKA\",\r\n    \"BANAALI\", \"BRUTAALI\", \"VEIKKAUS\", \"RETKEILIJÄ\", \"XENON\", \"DATANOMI\", \"LAADUKAS\", \"PITKÄ\", \"SUOMI\", \"JÄRVI\",\r\n    \"AUTUAS\", \"DIPLOMI\", \"ONGET\", \"MIKSI\", \"LAADUKAS\", \"SUTINA\", \"RYÖKÄLE\", \"NAPERO\", \"UIMARI\", \"KUPARI\", \"POSKI\"\r\n];\r\n*/\r\n\r\nfunction getRandomFrom(array) {\r\n    return array[Math.floor(array.length * Math.random())];\r\n}\r\n\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = this.getInitialState();\r\n        this.guesses = 9;\r\n        this.difficulty = \"Easy\";\r\n        this.wordList = [\"\"];\r\n\r\n        this.characterPressed = this.characterPressed.bind(this);\r\n        this.gameOver = this.gameOver.bind(this);\r\n        this.newGame = this.newGame.bind(this);\r\n    }\r\n\r\n    getInitialState() {\r\n        let state = {\r\n            charsRemain: 100,\r\n            guessedChars: [],\r\n            toGuessChars: [],\r\n            wrongGuessCount: 0,\r\n            message: \"Pick a Letter!\",\r\n            gameState: 0\r\n        }\r\n\r\n        return state;\r\n    }\r\n    \r\n    characterPressed(e) {\r\n        document.getElementById(\"key\"+e).disabled = true;\r\n        let guessed = this.checkGuess(e, this.state.toGuessChars);\r\n        let state = {...this.state};\r\n        state.guessedChars.push(e); // = [...this.state.guessedChars, e];\r\n        if (guessed > 0) {\r\n            state.charsRemain -= guessed;\r\n            state.message = state.charsRemain > 0 ? \"Correct!\" : \"You won\";\r\n        } else {\r\n            state.wrongGuessCount++;\r\n            state.message = state.wrongGuessCount < 9 ? \"Wrong!\" : \"You lost!\";\r\n        }\r\n\r\n        if ((state.wrongGuessCount >= 9) || (state.charsRemain <= 0)) this.gameOver(state);\r\n        else this.setState(state);\r\n    }\r\n\r\n    /**\r\n     * Picks a new word from wordlist and resets the state \r\n     * */\r\n    initWord() {\r\n        let state = {...this.state};\r\n        let word = getRandomFrom(this.wordList).toUpperCase();\r\n        state.toGuessChars = [...word];\r\n        state.guessedChars = [];\r\n        state.charsRemain = word.length;\r\n        state.wrongGuessCount = 9 - this.guesses;\r\n\r\n        this.setState(state);\r\n\r\n        //enable all keys\r\n        let keyboard = document.getElementById(\"keyboard\").childNodes;\r\n\r\n        for (let btn of keyboard) {\r\n            btn.disabled = false;\r\n        }\r\n    }\r\n\r\n    newGame(obj) {\r\n        this.state = this.getInitialState();\r\n\r\n        if (typeof obj === \"object\") {\r\n            this.wordList = obj.words;\r\n            this.guesses = obj.guesses;\r\n            this.difficulty = obj.difficulty;\r\n            obj = false;\r\n        }\r\n\r\n        this.state.gameState = obj ? 0 : 1;\r\n        this.initWord();\r\n    }\r\n\r\n    checkGuess(ch, array) {\r\n        let sum = 0;\r\n        for (let letter of array) if (letter === ch) sum++;\r\n        return sum;\r\n    }\r\n\r\n    componentDidMount() {\r\n        //this.init();\r\n    }\r\n\r\n    gameOver(state) {\r\n        state.gameState = 2;\r\n        this.setState(state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <h3>Hangman {this.difficulty}</h3>\r\n                <GameHeader gameState={this.state.gameState} message={this.state.message} \r\n                    guessesLeft={9 - this.state.wrongGuessCount} newGame={this.newGame} />\r\n                <ShowDrawing drawingIndex={this.state.wrongGuessCount + 1} />\r\n                <ShowWord toGuessChars={this.state.toGuessChars} guessedChars={this.state.guessedChars} \r\n                    visible={this.state.gameState !== 0} reveal={this.state.gameState===2}/>\r\n                <Keyboard MainCharacterPressed={this.characterPressed} visible={this.state.gameState === 1} />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n\r\n/*\r\n\r\n<h3>Hirsipuu</h3>\r\n                <div id=\"peli\">\r\n                    <p>Sinulla on {9 - this.state.wrongGuessCount} arvausta jäljellä!</p>\r\n                    <p>{this.state.message}</p>\r\n                </div>\r\n                <div id=\"gameover\">\r\n                    <button onClick={() => window.location.reload(false)}>Pelaa uudelleen!</button>\r\n                </div>\r\n\r\n*/","import './App.css';\r\nimport Main from './components/Main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Main />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}